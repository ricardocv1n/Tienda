// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para la tienda de zapatos

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  role          String   @default("CUSTOMER")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlist      Wishlist?
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Float
  originalPrice Float?
  stock         Int      @default(0)
  category      String
  brand         String
  isNew         Boolean  @default(false)
  discount      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  images        ProductImage[]
  sizes         ProductSize[]
  colors        ProductColor[]
  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  size      Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  color     String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Order {
  id              String    @id
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  status          String    @default("PROCESSING")
  total           Float
  shippingCost    Float
  shippingMethod  String
  paymentMethod   String
  addressId       Int
  address         Address   @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  size      Int?
  color     String?
  createdAt DateTime @default(now())
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  phone       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String
  helpful   Int      @default(0)
  unhelpful Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}
